package com.singlegraph;

import org.graphwalker.core.machine.ExecutionContext;
import com.singlegraph.SingleGraphTests;
import org.graphstream.graph.implementations.SingleGraph;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

/**
 * Implements the GraphWalker model: src/main/resources/SmallTest.json
 * <p/>
 * The interface SmallTest, that SomeSmallTest implements, is generated by
 * running: mvn graphwalker:generate-sources
 * also: mvn compile
 */
public class SomeSmallTest extends ExecutionContext implements SingleGraphTests {

  SingleGraph singleGraph = new SingleGraph("sg");
  int maxNodes = 5;
  int maxEdges = 5;

  @Test
  @Override
  public void v_NonEmptyGraph() {
    Assertions.assertTrue(this.singleGraph.getNodeCount() > 0);
  }

  @Override
  public void e_RemoveEdge() {
    this.singleGraph.removeEdge(this.singleGraph.getEdgeCount());
  }

  @Override
  public void e_AddNode() {
    this.singleGraph.addNode(String.valueOf(this.singleGraph.getNodeCount()+1));
  }

  @Test
  @Override
  public void v_EmptyGraph() {
    Assertions.assertTrue(this.singleGraph.getNodeCount() == 0 && this.singleGraph.getEdgeCount() == 0);
  }

  @Override
  public void e_Clear() {
    this.singleGraph.clear();
  }

  @Test
  @Override
  public void v_MaxNodes() {
    Assertions.assertEquals(this.maxNodes, this.singleGraph.getNodeCount());
  }

  @Override
  public void e_RemoveNode() {
    this.singleGraph.removeNode(this.singleGraph.getNodeCount()-1);
  }

  @Test
  @Override
  public void v_MaxNodesAndEdges() {
    Assertions.assertTrue(this.singleGraph.getNodeCount() == this.maxNodes && this.singleGraph.getEdgeCount() == this.maxEdges);
  }

  @Override
  public void e_AddEdge() {
    int n = this.singleGraph.getNodeCount();
    int e = this.singleGraph.getEdgeCount();
    this.singleGraph.addEdge(String.valueOf(e+1), n-2, n-1);
  }

  @Test
  public void quick_random_test() {
    this.v_EmptyGraph();
    this.e_AddNode();
    this.v_NonEmptyGraph();
    this.e_AddNode();
    this.v_NonEmptyGraph();
    this.e_AddNode();
    this.v_NonEmptyGraph();
    this.e_AddNode();
    this.v_NonEmptyGraph();
    this.e_AddNode();
    this.v_MaxNodes();
    this.e_RemoveNode();
    this.v_NonEmptyGraph();
    this.e_Clear();
    this.v_EmptyGraph();
    this.e_AddNode();
    this.v_NonEmptyGraph();
    this.e_AddNode();
    this.v_NonEmptyGraph();
    this.e_AddNode();
    this.v_NonEmptyGraph();
    this.e_AddNode();
    this.v_NonEmptyGraph();
    this.e_AddNode();
    this.v_MaxNodes();
    this.e_AddEdge();
    this.v_MaxNodes();
    this.e_AddEdge();
    this.v_MaxNodes();
    this.e_AddEdge();
    this.v_MaxNodes();
    this.e_AddEdge();
    this.v_MaxNodes();
    this.e_AddEdge();
    this.v_MaxNodesAndEdges();
    this.e_RemoveEdge();
    this.v_MaxNodes();
    this.e_RemoveNode();
    this.v_NonEmptyGraph();
    this.e_AddEdge();
    this.v_NonEmptyGraph();
    this.e_AddNode();
    this.v_MaxNodes();
    this.e_Clear();
    this.v_EmptyGraph();
    this.e_AddNode();
    this.v_NonEmptyGraph();
    this.e_AddNode();
    this.v_NonEmptyGraph();
    this.e_AddNode();
    this.v_NonEmptyGraph();
    this.e_AddNode();
    this.v_NonEmptyGraph();
    this.e_AddNode();
    this.v_MaxNodes();
    this.e_AddEdge();
    this.v_MaxNodes();
    this.e_AddEdge();
    this.v_MaxNodes();
    this.e_AddEdge();
    this.v_MaxNodes();
    this.e_AddEdge();
    this.v_MaxNodes();
    this.e_AddEdge();
    this.v_MaxNodesAndEdges();
    this.e_Clear();
    this.v_EmptyGraph();
    this.e_AddNode();
    this.v_NonEmptyGraph();
    this.e_AddNode();
    this.v_NonEmptyGraph();
    this.e_AddNode();
    this.v_NonEmptyGraph();
    this.e_AddNode();
    this.v_NonEmptyGraph();
    this.e_AddNode();
    this.v_MaxNodes();
    this.e_RemoveEdge();
    this.v_MaxNodes();
    this.e_RemoveNode();
    this.v_NonEmptyGraph();
    this.e_RemoveNode();
    this.v_NonEmptyGraph();
    this.e_RemoveEdge();
    this.v_NonEmptyGraph();
    this.e_AddNode();
    this.v_NonEmptyGraph();
    this.e_AddNode();
    this.v_MaxNodes();
    this.e_AddEdge();
    this.v_MaxNodes();
    this.e_AddEdge();
    this.v_MaxNodes();
    this.e_AddEdge();
    this.v_MaxNodes();
    this.e_AddEdge();
    this.v_MaxNodes();
    this.e_AddEdge();
    this.v_MaxNodes();
    this.e_AddEdge();
    this.v_MaxNodes();
    this.e_AddEdge();
    this.v_MaxNodesAndEdges();
    this.e_RemoveNode();
    this.v_NonEmptyGraph();
    this.e_Clear();
    this.v_EmptyGraph();
    this.e_Clear();
    this.v_EmptyGraph();
    this.e_AddNode();
    this.v_NonEmptyGraph();
    this.e_RemoveNode();
    this.v_EmptyGraph();
  }

  @Test
  public void a_star_to_MaxNodesAndEdges() {
    this.v_EmptyGraph();
    this.e_AddNode();
    this.v_NonEmptyGraph();
    this.e_AddNode();
    this.v_NonEmptyGraph();
    this.e_AddNode();
    this.v_NonEmptyGraph();
    this.e_AddNode();
    this.v_NonEmptyGraph();
    this.e_AddNode();
    this.v_MaxNodes();
    this.e_AddEdge();
    this.v_MaxNodes();
    this.e_AddEdge();
    this.v_MaxNodes();
    this.e_AddEdge();
    this.v_MaxNodes();
    this.e_AddEdge();
    this.v_MaxNodes();
    this.e_AddEdge();
    this.v_MaxNodesAndEdges();
  }
}
