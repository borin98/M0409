package com.path;

import org.graphstream.graph.implementations.SingleGraph;
import org.graphwalker.core.machine.ExecutionContext;
import org.graphstream.graph.Path;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

/**
 * Implements the GraphWalker model: src/main/resources/SmallTest.json
 * <p/>
 * The interface SmallTest, that SomeSmallTest implements, is generated by
 * running: mvn graphwalker:generate-sources
 * also: mvn compile
 */
public class SomeSmallTest extends ExecutionContext implements PathModel {

  Path path = new Path();
  int number_of_nodes_in_graph = 10;
  SingleGraph singleGraph = new SingleGraph("sg");

  @Test
  @Override
  public void v_EmptyPath() {
    Assertions.assertEquals(0, this.path.getNodeCount());
    Assertions.assertEquals(0, this.path.getEdgeCount());
  }

  @Test
  @Override
  public void v_NonEmptyPath() {
    Assertions.assertTrue(this.path.getNodeCount() > 0);
//    Assertions.assertTrue(path.getEdgeCount() >= 1);
  }

  @Override
  public void e_PopNode() {
    this.path.popNode();
  }

  @Override
  public void e_PopEdge() {
    this.path.popEdge();
  }

  @Override
  public void e_Clear() {
    this.path.clear();
  }

  @Override
  public void e_RemoveLoops() {
    this.path.removeLoops();
  }

  @Override
  public void e_Add() {

    if (this.path.getNodeCount() == 0) {
      this.path.setRoot(this.singleGraph.getNode(0));
    } else {
      int edgeCount = this.path.getEdgeCount();
      this.path.add(singleGraph.getEdge(edgeCount));
    }

  }


  private void populateGraph() {

    int edge_index = 0;
    this.singleGraph.addNode(String.valueOf(0));
    this.singleGraph.addEdge(String.valueOf(++edge_index), String.valueOf(0), String.valueOf(0));

    if (this.number_of_nodes_in_graph == 1) {
      return ;
    }

    for (int i = 1; i < this.number_of_nodes_in_graph; i++) {
//      String x = String.valueOf(i);
//      String y = String.valueOf(i - 1);
//      String z = String.valueOf(i);
      this.singleGraph.addNode(String.valueOf(i));
      this.singleGraph.addEdge(String.valueOf(++edge_index), String.valueOf(i), String.valueOf(i));
      this.singleGraph.addEdge(String.valueOf(++edge_index), String.valueOf(i - 1), String.valueOf(i));
    }

    if (this.number_of_nodes_in_graph > 2) {
      this.singleGraph.addEdge(String.valueOf(++edge_index), String.valueOf(this.number_of_nodes_in_graph - 1), String.valueOf(0));
    }

  }

  public void random_edge_coverage() {
    this.populateGraph();

    this.v_EmptyPath();
    this.e_Clear();
    this.v_EmptyPath();
    this.e_Add();
    this.v_NonEmptyPath();
    this.e_PopEdge();
    this.v_NonEmptyPath();
    this.e_PopEdge();
    this.v_EmptyPath();
    this.e_Clear();
    this.v_EmptyPath();
    this.e_Clear();
    this.v_EmptyPath();
    this.e_Add();
    this.v_NonEmptyPath();
    this.e_PopNode();
    this.v_NonEmptyPath();
    this.e_Add();
    this.v_NonEmptyPath();
    this.e_Clear();
    this.v_EmptyPath();
    this.e_Clear();
    this.v_EmptyPath();
    this.e_Clear();
    this.v_EmptyPath();
    this.e_Add();
    this.v_NonEmptyPath();
    this.e_PopNode();
    this.v_NonEmptyPath();
    this.e_PopEdge();
    this.v_EmptyPath();
    this.e_Clear();
    this.v_EmptyPath();
    this.e_Clear();
    this.v_EmptyPath();
    this.e_Add();
    this.v_NonEmptyPath();
    this.e_PopNode();
    this.v_NonEmptyPath();
    this.e_RemoveLoops();
    this.v_NonEmptyPath();
    this.e_Clear();
    this.v_EmptyPath();
    this.e_Clear();
    this.v_EmptyPath();
    this.e_Clear();
    this.v_EmptyPath();
    this.e_Add();
    this.v_NonEmptyPath();
    this.e_PopNode();
    this.v_NonEmptyPath();
    this.e_PopNode();
    this.v_EmptyPath();

  }
}
